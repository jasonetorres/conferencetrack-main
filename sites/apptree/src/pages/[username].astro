---
import Layout from '../layouts/Layout.astro';

export const prerender = false;

const { username } = Astro.params;

// --- Get All Environment Variables ---
const appwriteEndpoint = import.meta.env.PUBLIC_APPWRITE_ENDPOINT;
const appwriteProjectId = import.meta.env.PUBLIC_APPWRITE_PROJECT_ID;
const dbId = import.meta.env.PUBLIC_APPWRITE_DATABASE_ID;
const profilesCollectionId = import.meta.env.PUBLIC_APPWRITE_PROFILES_COLLECTION_ID;
const linksCollectionId = import.meta.env.PUBLIC_APPWRITE_LINKS_COLLECTION_ID;
const profilePicsBucketId = import.meta.env.PUBLIC_APPWRITE_PROFILE_PICS_BUCKET_ID;
---

<Layout title={`@${username}'s Links`}>
    <div id="public-profile-loading" class="card text-center">
        <p>Loading @{username}'s profile...</p>
    </div>

    <div id="public-profile-content" style="display: none;">
        <div class="profile-pic-container">
            <div id="public-profile-pic" class="profile-pic-placeholder">?</div>
        </div>
        <h1 id="public-username" class="text-center">@{username}</h1>
        <p id="public-bio" class="text-center mb-4" style="white-space: pre-wrap;"></p>
        <div id="public-links-container" class="links-management"></div>
    </div>

    <div id="public-profile-not-found" class="card text-center" style="display: none;">
        <h2>User Not Found</h2>
        <p>Sorry, we couldn't find a page for <strong>@{username}</strong>.</p>
        <a href="/" class="button mt-2">Go Home</a>
    </div>

    <script type="module" define:vars={{
        pageUsername: username,
        appwriteEndpoint,
        appwriteProjectId,
        dbId,
        profilesCollectionId,
        linksCollectionId,
        profilePicsBucketId
    }}>
        // --- 1. Import Correctly ---
        import { Client, Databases, Storage, Query } from 'appwrite';

        // --- 2. Initialize Appwrite ---
        const client = new Client()
            .setEndpoint(appwriteEndpoint)
            .setProject(appwriteProjectId);

        const databases = new Databases(client);
        const storage = new Storage(client);
        // --- End Initialization ---


        const loadingDiv = document.getElementById('public-profile-loading');
        const contentDiv = document.getElementById('public-profile-content');
        const notFoundDiv = document.getElementById('public-profile-not-found');
        const publicProfilePic = document.getElementById('public-profile-pic');
        const publicUsernameH1 = document.getElementById('public-username');
        const publicBioP = document.getElementById('public-bio');
        const publicLinksContainer = document.getElementById('public-links-container');

        function getIconClass(url) {
            try {
                const domain = new URL(url).hostname.toLowerCase().replace('www.', '');
                if (domain.includes('github.com')) return 'fa-brands fa-github';
                if (domain.includes('twitter.com') || domain.includes('x.com')) return 'fa-brands fa-x-twitter';
                if (domain.includes('linkedin.com')) return 'fa-brands fa-linkedin-in';
                if (domain.includes('youtube.com')) return 'fa-brands fa-youtube'; // Simplified YouTube check
                if (domain.includes('instagram.com')) return 'fa-brands fa-instagram';
                if (domain.includes('facebook.com')) return 'fa-brands fa-facebook';
                if (domain.includes('dev.to')) return 'fa-brands fa-dev';
                if (domain.includes('medium.com')) return 'fa-brands fa-medium';
                if (domain.includes('stackoverflow.com')) return 'fa-brands fa-stack-overflow';
                if (domain.includes('gitlab.com')) return 'fa-brands fa-gitlab';
                if (domain.includes('behance.net')) return 'fa-brands fa-behance';
                if (domain.includes('dribbble.com')) return 'fa-brands fa-dribbble';
                if (domain.includes('twitch.tv')) return 'fa-brands fa-twitch';
                if (domain.includes('discord')) return 'fa-brands fa-discord';
                if (url.startsWith('mailto:')) return 'fa-solid fa-envelope';
                return 'fa-solid fa-link';
            } catch (e) {
                return 'fa-solid fa-link';
            }
        }

        async function loadPublicProfile() {
            if (!loadingDiv || !contentDiv || !notFoundDiv || !publicProfilePic || !publicUsernameH1 || !publicBioP || !publicLinksContainer) {
                 console.error("Public profile elements not found.");
                 return;
            }
             // Check if Appwrite config is loaded
            if (!appwriteEndpoint || !appwriteProjectId || !dbId || !profilesCollectionId || !linksCollectionId || !profilePicsBucketId) {
                console.error("Appwrite configuration missing. Check .env file and define:vars.");
                loadingDiv.textContent = 'Configuration Error.';
                return;
            }

            try {
                // 1. Find profile using 'databases' and 'Query'
                const profileQuery = await databases.listDocuments(
                    dbId, // Use env variable
                    profilesCollectionId, // Use env variable
                    [Query.equal('username', pageUsername), Query.limit(1)] // Use Query
                );

                if (profileQuery.documents.length === 0) throw new Error('User profile not found');
                const userProfile = profileQuery.documents[0];

                // Update display
                publicUsernameH1.textContent = `@${userProfile.username}`;
                document.title = `@${userProfile.username}'s Links | applinks`;
                publicBioP.textContent = userProfile.bio || '';
                if (userProfile.profilePicId) {
                    // Use 'storage' and env variable
                    const picUrl = storage.getFilePreview(profilePicsBucketId, userProfile.profilePicId, 240);
                    publicProfilePic.style.backgroundImage = `url(${picUrl.toString()})`;
                    publicProfilePic.classList.remove('profile-pic-placeholder');
                    publicProfilePic.textContent = '';
                } else {
                    publicProfilePic.style.backgroundImage = 'none';
                    publicProfilePic.classList.add('profile-pic-placeholder');
                    publicProfilePic.textContent = userProfile.username.charAt(0).toUpperCase() || '?';
                }

                // 2. Fetch links using 'databases' and 'Query'
                const linksQuery = await databases.listDocuments(
                    dbId, // Use env variable
                    linksCollectionId, // Use env variable
                    [Query.equal('userId', userProfile.userId), Query.orderAsc('order')] // Use Query
                );

                publicLinksContainer.innerHTML = '';
                if (linksQuery.documents.length === 0) {
                    publicLinksContainer.innerHTML = '<p class="text-center">This user hasn\'t added any links yet.</p>';
                } else {
                    linksQuery.documents.forEach(link => {
                        const linkAnchor = document.createElement('a');
                        linkAnchor.href = link.url;
                        linkAnchor.className = 'link-card mb-2';
                        linkAnchor.target = '_blank';
                        linkAnchor.rel = 'noopener noreferrer';
                        linkAnchor.innerHTML = `
                            <i class="link-icon ${getIconClass(link.url)}"></i>
                            <span class="link-text">${link.title}</span>
                        `;
                        publicLinksContainer.appendChild(linkAnchor);
                    });
                }

                loadingDiv.style.display = 'none';
                contentDiv.style.display = 'block';
                notFoundDiv.style.display = 'none';

            } catch (error) {
                console.error(`Error loading profile for ${pageUsername}:`, error);
                loadingDiv.style.display = 'none';
                contentDiv.style.display = 'none';
                notFoundDiv.style.display = 'block';
            }
        }

        loadPublicProfile();
    </script>
</Layout>