---

import Layout from '../layouts/Layout.astro';


const appwriteEndpoint = import.meta.env.PUBLIC_APPWRITE_ENDPOINT;
const appwriteProjectId = import.meta.env.PUBLIC_APPWRITE_PROJECT_ID;
const dbId = import.meta.env.PUBLIC_APPWRITE_DATABASE_ID;
const profilesCollectionId = import.meta.env.PUBLIC_APPWRITE_PROFILES_COLLECTION_ID;
---

<Layout title="Sign Up">
    <div class="card">
        <h2>Create Your Account</h2>
        <form id="signup-form">
            <div>
                <label for="username">Username</label>
                <input type="text" id="username" name="username" placeholder="e.g., yourname (no spaces, lowercase)" required />
                <small>This will be your public URL: yoursite.com/username</small>
            </div>
            <div>
                <label for="email">Email</label>
                <input type="email" id="email" name="email" placeholder="you@example.com" required />
            </div>
            <div>
                <label for="password">Password</label>
                <input type="password" id="password" name="password" placeholder="Min. 8 characters" required />
            </div>
            <button type="submit" id="submit-button">Sign Up</button>
        </form>
        <div id="message-area" class="message" style="display: none;"></div>
        <p class="text-center mt-4">Already have an account? <a href="/login">Login here</a>.</p>
    </div>

    <script define:vars={{
        appwriteEndpoint,
        appwriteProjectId,
        dbId,
        profilesCollectionId
    }}>
        // --- 1. Import Correctly ---
        import { Client, Account, Databases, ID, Query, AppwriteException } from 'appwrite';

        // --- 2. Initialize Appwrite ---
        const client = new Client()
            .setEndpoint(appwriteEndpoint)
            .setProject(appwriteProjectId);

        const account = new Account(client);
        const databases = new Databases(client);
        // --- End Initialization ---


        const form = document.getElementById('signup-form') as HTMLFormElement | null;
        const usernameInput = document.getElementById('username') as HTMLInputElement | null;
        const emailInput = document.getElementById('email') as HTMLInputElement | null;
        const passwordInput = document.getElementById('password') as HTMLInputElement | null;
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement | null;
        const messageArea = document.getElementById('message-area') as HTMLDivElement | null;

        function showMessage(text: string, type: 'error' | 'success' = 'error') {
            if (messageArea) {
                messageArea.textContent = text;
                messageArea.className = `message ${type}`;
                messageArea.style.display = 'block';
            }
        }

        // --- 3. Check Config ---
        if (!appwriteEndpoint || !appwriteProjectId || !dbId || !profilesCollectionId) {
            console.error("Appwrite configuration missing. Check .env and define:vars.");
            if (messageArea) showMessage("Configuration error. Cannot process signup.");
        }


        if (form && submitButton && messageArea && usernameInput && emailInput && passwordInput && appwriteEndpoint) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                submitButton.disabled = true;
                submitButton.textContent = 'Signing up...';
                showMessage('', 'error'); // Clear previous

                const username = usernameInput.value.trim().toLowerCase();
                const email = emailInput.value.trim();
                const password = passwordInput.value;

                // --- Validation ---
                if (!/^[a-z0-9_.-]+$/.test(username) || password.length < 8) {
                    showMessage('Invalid username (lowercase, numbers, _, ., -) or password (min 8 chars).');
                    submitButton.disabled = false;
                    submitButton.textContent = 'Sign Up';
                    return;
                }

                try {
                    // Step 1: Check username
                    console.log("Checking username:", username);
                    // Use 'databases', 'Query', and env variables
                    const existingProfiles = await databases.listDocuments(
                        dbId,
                        profilesCollectionId,
                        [Query.equal('username', username)]
                    );
                    if (existingProfiles.total > 0) {
                        // Use a more specific error or handle it as a known case.
                        throw new AppwriteException('Username might already be taken. Please choose another.', 409, 'user_already_exists');
                    }

                    // Step 2: Create Appwrite Auth User
                    console.log("Creating auth user for:", email);
                    // Use 'account', 'ID'
                    await account.create(ID.unique(), email, password, username);
                    console.log("Auth user created. Verification email sent.");

                    // Step 3 & 4 - REMOVED

                    // Step 5: Show Success Message
                    showMessage('Account created! Please check your email for a verification link, then head to the Login page.', 'success');
                    form.reset();
                    submitButton.textContent = 'Account Created!';

                } catch (error: unknown) { // Use 'unknown'
                    console.error("Signup process failed:", error);
                    let errorMessage = 'An unknown error occurred.';

                    // Check if it's an AppwriteException
                    if (error instanceof AppwriteException) {
                         if (error.code === 409 || error.message.includes('already exists')) {
                            errorMessage = 'An account with this email or username already exists.';
                         } else if (error.message.includes('Username')) {
                             errorMessage = 'Username might already be taken. Please choose another.';
                         } else {
                            errorMessage = `Signup failed: ${error.message}`;
                         }
                    } else if (error instanceof Error) {
                        errorMessage = `An error occurred: ${error.message}`;
                    }

                    showMessage(errorMessage);
                    submitButton.disabled = false;
                    submitButton.textContent = 'Sign Up';
                }
            });
        } else {
             console.error("One or more signup form elements were not found or Appwrite not configured!");
             if (messageArea) showMessage("Page Error: Could not find form elements or config.");
        }
    </script>
</Layout>