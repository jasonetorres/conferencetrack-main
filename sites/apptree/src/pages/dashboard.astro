---
import Layout from '../layouts/Layout.astro';

// --- Get All Environment Variables ---
const appwriteEndpoint = import.meta.env.PUBLIC_APPWRITE_ENDPOINT;
const appwriteProjectId = import.meta.env.PUBLIC_APPWRITE_PROJECT_ID;
const dbId = import.meta.env.PUBLIC_APPWRITE_DATABASE_ID;
const profilesCollectionId = import.meta.env.PUBLIC_APPWRITE_PROFILES_COLLECTION_ID;
const linksCollectionId = import.meta.env.PUBLIC_APPWRITE_LINKS_COLLECTION_ID;
const profilePicsBucketId = import.meta.env.PUBLIC_APPWRITE_PROFILE_PICS_BUCKET_ID;
---

<Layout title="My Dashboard">
    <div id="loading-state" class="card text-center">
        <p>Loading your dashboard...</p>
    </div>

    <div id="dashboard-content" style="display: none;">
        <div class="dashboard-actions">
            <button id="open-add-link-modal-button" class="button secondary" disabled><i class="fa-solid fa-plus"></i> Add Link</button>
            <button id="open-preview-modal-button" class="button secondary" disabled><i class="fa-solid fa-eye"></i> Preview</button>
            <button id="publish-button" class="button" disabled><i class="fa-solid fa-cloud-arrow-up"></i> Publish Changes</button>
        </div>

        <div class="card profile-management">
             <h2>My Profile</h2>
             <div class="profile-pic-container">
                 <div id="profile-pic-preview-el" class="profile-pic-placeholder">?</div>
                 <input type="file" id="profile-pic-upload" accept="image/png, image/jpeg, image/gif" style="display: none;">
                 <button id="change-pic-button" class="button secondary">Change Picture</button>
                 <small id="upload-status" class="mt-1" style="display: none; color: var(--text-secondary-color);"></small>
             </div>
             <form id="profile-form">
                 <div>
                     <label for="username-display">Username (Public URL)</label>
                     <input type="text" id="username-display" readonly />
                     <small>Your public page: <a id="public-page-link" href="#" target="_blank"></a></small>
                 </div>
                 <div>
                     <label for="bio">Bio</label>
                     <textarea id="bio" placeholder="Tell us a bit about yourself..."></textarea>
                 </div>
             </form>
             <div id="profile-message-area" class="message" style="display: none;"></div>
         </div>

        <div class="card links-management">
            <h2>My Links</h2>
            <ul id="links-list" class="dashboard-links-list">
                {/* Links will be dynamically inserted here */}
            </ul>
            <div id="link-message-area" class="message" style="display: none;"></div> {/* For delete link feedback */}
        </div>

        <div class="card text-center">
            <button id="logout-button" class="button danger">Logout</button>
        </div>
    </div>

    {/* Add Link Modal */}
    <div id="add-link-modal" class="modal-overlay">
         <div class="modal-content">
             <button class="modal-close-button" data-modal-id="add-link-modal">×</button>
             <h3>Add New Link</h3>
             <form id="add-link-modal-form" class="mt-2">
                 <div>
                     <label for="modal-link-title">Title</label>
                     <input type="text" id="modal-link-title" placeholder="e.g., My Portfolio" required />
                 </div>
                 <div>
                     <label for="modal-link-url">URL</label>
                     <input type="url" id="modal-link-url" placeholder="https://yourlink.com" required />
                 </div>
                 <button type="submit" id="submit-new-link-button" class="button">Add Link</button>
             </form>
             <div id="modal-link-message-area" class="message" style="display: none;"></div>
         </div>
     </div>

     {/* Preview Modal */}
     <div id="preview-modal" class="modal-overlay">
         <div class="modal-content">
             <button class="modal-close-button" data-modal-id="preview-modal">×</button>
             <h2>My Page Preview</h2>
             <div class="preview-controls mb-2">
                 <button id="refresh-preview-iframe-button" class="button secondary">Refresh Preview</button>
             </div>
             <div class="iframe-container">
                 <iframe id="page-preview-iframe" title="My Page Preview" src="about:blank"></iframe>
             </div>
         </div>
     </div>

    <script define:vars={{
        appwriteEndpoint,
        appwriteProjectId,
        dbId,
        profilesCollectionId,
        linksCollectionId,
        profilePicsBucketId
    }}>
        // --- 1. Import Correctly ---
        import { Client, Account, Databases, Storage, ID, Query, AppwriteException } from 'appwrite';

        // --- 2. Initialize Appwrite ---
        const client = new Client()
            .setEndpoint(appwriteEndpoint)
            .setProject(appwriteProjectId);

        const account = new Account(client);
        const databases = new Databases(client);
        const storage = new Storage(client);
        // --- End Initialization ---


        // DOM Elements (Keep as they are)
        const loadingState = document.getElementById('loading-state');
        const dashboardContent = document.getElementById('dashboard-content');
        const publishButton = document.getElementById('publish-button');
        const openPreviewModalButton = document.getElementById('open-preview-modal-button');
        const openAddLinkModalButton = document.getElementById('open-add-link-modal-button');
        const usernameDisplay = document.getElementById('username-display');
        const publicPageLink = document.getElementById('public-page-link');
        const bioTextarea = document.getElementById('bio');
        const profilePicPreviewEl = document.getElementById('profile-pic-preview-el');
        const profilePicUploadInput = document.getElementById('profile-pic-upload');
        const changePicButton = document.getElementById('change-pic-button');
        const uploadStatus = document.getElementById('upload-status');
        const profileMessageArea = document.getElementById('profile-message-area');
        const linksList = document.getElementById('links-list');
        const linkMessageArea = document.getElementById('link-message-area');
        const addLinkModal = document.getElementById('add-link-modal');
        const addLinkModalForm = document.getElementById('add-link-modal-form');
        const modalLinkTitleInput = document.getElementById('modal-link-title');
        const modalLinkUrlInput = document.getElementById('modal-link-url');
        const submitNewLinkButton = document.getElementById('submit-new-link-button');
        const modalLinkMessageArea = document.getElementById('modal-link-message-area');
        const previewModal = document.getElementById('preview-modal');
        const pagePreviewIframe = document.getElementById('page-preview-iframe');
        const refreshPreviewIframeButton = document.getElementById('refresh-preview-iframe-button');
        const closeButtons = document.querySelectorAll('.modal-close-button');
        const logoutButton = document.getElementById('logout-button');

        // State variables (Keep as they are, JSDoc types should still work if 'appwrite' package is installed)
        /** @type {import('appwrite').Models.User<import('appwrite').Models.Preferences> | null} */
        let currentAuthUser = null;
        /** @type {(import('appwrite').Models.Document & {username: string, userId: string, bio?: string, profilePicId?: string}) | null} */
        let userProfileDoc = null;

        // Utility functions (Keep as they are)
        function getIconClass(url) { /* ... same as before ... */ 
             try {
                const domain = new URL(url).hostname.toLowerCase().replace('www.', '');
                if (domain.includes('github.com')) return 'fa-brands fa-github';
                if (domain.includes('twitter.com') || domain.includes('x.com')) return 'fa-brands fa-x-twitter';
                if (domain.includes('linkedin.com')) return 'fa-brands fa-linkedin-in';
                if (domain.includes('youtube.com')) return 'fa-brands fa-youtube'; // Simpler YouTube check
                if (domain.includes('instagram.com')) return 'fa-brands fa-instagram';
                if (domain.includes('facebook.com')) return 'fa-brands fa-facebook';
                if (domain.includes('dev.to')) return 'fa-brands fa-dev';
                if (domain.includes('medium.com')) return 'fa-brands fa-medium';
                if (domain.includes('stackoverflow.com')) return 'fa-brands fa-stack-overflow';
                if (domain.includes('gitlab.com')) return 'fa-brands fa-gitlab';
                if (domain.includes('behance.net')) return 'fa-brands fa-behance';
                if (domain.includes('dribbble.com')) return 'fa-brands fa-dribbble';
                if (domain.includes('twitch.tv')) return 'fa-brands fa-twitch';
                if (domain.includes('discord')) return 'fa-brands fa-discord';
                if (url.startsWith('mailto:')) return 'fa-solid fa-envelope';
                return 'fa-solid fa-link';
            } catch (e) {
                return 'fa-solid fa-link';
            }
        }
        function showMessage(el, text, type = 'error', duration = 4000) { /* ... same as before ... */ 
             if (!el) return;
            el.textContent = text;
            el.className = `message ${type}`;
            el.style.display = 'block';
            setTimeout(() => { if(el instanceof HTMLElement) el.style.display = 'none'; }, duration);
        }
        function openModal(modalId) { /* ... same as before ... */ 
            const modal = document.getElementById(modalId);
            if (modal && modal.classList.contains('modal-overlay')) {
                modal.classList.add('active');
            }
        }
        function closeModal(modalId) { /* ... same as before ... */ 
            const modal = document.getElementById(modalId);
            if (modal && modal.classList.contains('modal-overlay')) {
                modal.classList.remove('active');
            }
        }

        // --- Core Appwrite Functions (Updated) ---

        async function ensureProfileExists(authUser) {
            if (!loadingState) return null;
            try {
                // Use 'databases', 'Query', and env variables
                const query = [Query.equal('userId', authUser.$id), Query.limit(1)];
                const profileQuery = await databases.listDocuments(dbId, profilesCollectionId, query);
                if (profileQuery.documents.length > 0) {
                     return /** @type {(import('appwrite').Models.Document & {username: string, userId: string, bio?: string, profilePicId?: string})} */ (profileQuery.documents[0]);
                }
                const newProfileData = { username: authUser.name, userId: authUser.$id, bio: '', profilePicId: '' };
                // Use 'databases', 'ID', and env variables
                const newProfile = await databases.createDocument(
                    dbId, profilesCollectionId, ID.unique(), newProfileData
                );
                return /** @type {(import('appwrite').Models.Document & {username: string, userId: string, bio?: string, profilePicId?: string})} */ (newProfile);
            } catch (error) {
                console.error("Error checking/creating profile:", error);
                if (loadingState instanceof HTMLElement) loadingState.innerHTML = '<p>Error loading profile. Please refresh.</p>';
                return null;
            }
        }

        function populateDashboard(profile) { /* ... same as before, BUT 'updateProfilePicPreview' is now correct ... */ 
            if (!profile) return;
            userProfileDoc = profile;

            if (usernameDisplay instanceof HTMLInputElement) usernameDisplay.value = profile.username;
            if (publicPageLink instanceof HTMLAnchorElement) {
                const publicLinkUrl = `${window.location.origin}/${profile.username}`;
                publicPageLink.href = publicLinkUrl;
                publicPageLink.textContent = publicLinkUrl;
            }
            if (bioTextarea instanceof HTMLTextAreaElement) bioTextarea.value = profile.bio || '';
            updateProfilePicPreview(profile.profilePicId); // Call the updated version

            if (publishButton instanceof HTMLButtonElement) publishButton.disabled = false;
            if (openPreviewModalButton instanceof HTMLButtonElement) openPreviewModalButton.disabled = false;
            if (openAddLinkModalButton instanceof HTMLButtonElement) openAddLinkModalButton.disabled = false;
        }

        function updateProfilePicPreview(picId) {
            if (!profilePicPreviewEl || !userProfileDoc) return;
            if (picId) {
                // Use 'storage' and env variable
                const picUrl = storage.getFilePreview(profilePicsBucketId, picId, 200);
                profilePicPreviewEl.style.backgroundImage = `url(${picUrl.toString()})`;
                profilePicPreviewEl.textContent = '';
            } else {
                profilePicPreviewEl.style.backgroundImage = 'none';
                profilePicPreviewEl.textContent = userProfileDoc.username.charAt(0).toUpperCase() || '?';
            }
        }

        async function publishChanges() {
            if (!userProfileDoc || !(bioTextarea instanceof HTMLTextAreaElement) || !(publishButton instanceof HTMLButtonElement)) return;
            const originalButtonText = publishButton.innerHTML;
            publishButton.disabled = true; publishButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Publishing...';
            try {
                // Use 'databases' and env variables
                const updatedDoc = await databases.updateDocument(
                    dbId, profilesCollectionId, userProfileDoc.$id,
                    { bio: bioTextarea.value.trim() }
                );
                if(userProfileDoc) userProfileDoc.bio = /** @type {string | undefined} */ (updatedDoc.bio);
                showMessage(profileMessageArea, 'Profile changes published!', 'success');
            } catch (error) {
                console.error("Error publishing profile changes:", error);
                showMessage(profileMessageArea, 'Failed to publish profile changes.');
            }
            finally { publishButton.disabled = false; publishButton.innerHTML = originalButtonText; }
        }

        async function uploadPicture(file) {
             if (!userProfileDoc || !(changePicButton instanceof HTMLButtonElement) || !uploadStatus) return;
             changePicButton.disabled = true;
             if(uploadStatus instanceof HTMLElement) {
                uploadStatus.style.display = 'inline'; uploadStatus.textContent = 'Uploading...';
             }
             try {
                 if (userProfileDoc.profilePicId) {
                     // Use 'storage' and env variable
                     await storage.deleteFile(profilePicsBucketId, userProfileDoc.profilePicId);
                 }
                 // Use 'storage', 'ID', and env variable
                 const uploadedFile = await storage.createFile(profilePicsBucketId, ID.unique(), file);
                 const updatePayload = { profilePicId: uploadedFile.$id };
                 // Use 'databases' and env variables
                 const updatedDoc = await databases.updateDocument(
                    dbId, profilesCollectionId, userProfileDoc.$id,
                    updatePayload
                 );
                 if(userProfileDoc) userProfileDoc.profilePicId = /** @type {string | undefined} */ (updatedDoc.profilePicId);
                 updateProfilePicPreview(/** @type {string | undefined} */ (updatedDoc.profilePicId));
                 showMessage(profileMessageArea, 'Picture updated!', 'success');
             } catch (error) {
                 console.error("Error uploading picture:", error);
                 showMessage(profileMessageArea, 'Upload failed. Is the file an image and < 5MB?');
             }
             finally {
                 changePicButton.disabled = false;
                 if(uploadStatus instanceof HTMLElement) uploadStatus.style.display = 'none';
                 if (profilePicUploadInput instanceof HTMLInputElement) profilePicUploadInput.value = '';
             }
        }

        async function loadUserLinks() {
            if (!linksList || !currentAuthUser) return;
            linksList.innerHTML = '<li>Loading links...</li>';
            try {
                // Use 'databases', 'Query', and env variables
                const query = [Query.equal('userId', currentAuthUser.$id), Query.orderAsc('order')];
                const response = await databases.listDocuments(dbId, linksCollectionId, query);
                linksList.innerHTML = '';
                if (response.documents.length === 0) {
                    linksList.innerHTML = '<li style="background: none; box-shadow: none; border: none; text-align: center; color: var(--text-secondary-color);">No links added yet. Use the "+ Add Link" button.</li>';
                } else {
                    response.documents.forEach(
                        /** @param {(import('appwrite').Models.Document & {title: string, url: string, userId: string, order?: number})} link */
                        (link) => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <i class="link-icon ${getIconClass(link.url)}"></i>
                            <div class="link-info">
                                <span class="link-title">${link.title}</span>
                                <span class="link-url">${link.url}</span>
                            </div>
                            <button class="danger delete-link-button" data-link-id="${link.$id}">Delete</button>
                        `;
                        linksList.appendChild(li);
                    });
                }
            } catch (error) {
                console.error("Error loading links:", error);
                if (linksList instanceof HTMLUListElement) linksList.innerHTML = '<li>Could not load links.</li>';
            }
        }

        async function addLinkFromModal(title, url) {
            if (!currentAuthUser || !(submitNewLinkButton instanceof HTMLButtonElement) || !modalLinkMessageArea || !(addLinkModalForm instanceof HTMLFormElement) ) return;
            const originalButtonText = submitNewLinkButton.textContent;
            submitNewLinkButton.disabled = true; submitNewLinkButton.textContent = 'Adding...';
            try {
                const linkData = { title, url, userId: currentAuthUser.$id, order: 0 }; // Consider implementing order logic
                // Use 'databases', 'ID', and env variables
                await databases.createDocument(
                    dbId, linksCollectionId, ID.unique(), linkData
                );
                addLinkModalForm.reset();
                showMessage(modalLinkMessageArea, 'Link added!', 'success', 2000);
                await loadUserLinks();
                setTimeout(() => {
                    closeModal('add-link-modal');
                    if (modalLinkMessageArea instanceof HTMLElement) modalLinkMessageArea.style.display = 'none';
                }, 1500);
            } catch (error) {
                console.error("Error adding link:", error);
                showMessage(modalLinkMessageArea, 'Failed to add link.');
            }
            finally { submitNewLinkButton.disabled = false; submitNewLinkButton.textContent = originalButtonText; }
        }

        async function deleteLink(linkId) {
            if (!linkMessageArea) return;
            try {
                // Use 'databases' and env variables
                await databases.deleteDocument(dbId, linksCollectionId, linkId);
                showMessage(linkMessageArea, 'Link deleted!', 'success');
                await loadUserLinks();
            } catch (error) {
                console.error("Error deleting link:", error);
                showMessage(linkMessageArea, 'Failed to delete link.');
            }
        }

        async function initDashboard() {
            if (!loadingState || !dashboardContent) {
                console.error("Essential dashboard layout elements not found!");
                return;
            }
             // Check if Appwrite config is loaded
            if (!appwriteEndpoint || !appwriteProjectId || !dbId || !profilesCollectionId || !linksCollectionId || !profilePicsBucketId) {
                console.error("Appwrite configuration missing. Check .env file and define:vars.");
                if (loadingState instanceof HTMLElement) loadingState.textContent = 'Configuration Error.';
                return;
            }
            // Disable buttons
            if (publishButton instanceof HTMLButtonElement) publishButton.disabled = true;
            if (openPreviewModalButton instanceof HTMLButtonElement) openPreviewModalButton.disabled = true;
            if (openAddLinkModalButton instanceof HTMLButtonElement) openAddLinkModalButton.disabled = true;

            try {
                // Use 'account'
                currentAuthUser = await account.get();
                const profile = await ensureProfileExists(currentAuthUser);
                if (profile) {
                    populateDashboard(profile);
                    await loadUserLinks();
                    loadingState.style.display = 'none';
                    dashboardContent.style.display = 'block';
                } else {
                    if(dashboardContent instanceof HTMLElement) dashboardContent.style.display = 'none';
                    if(loadingState instanceof HTMLElement) loadingState.textContent = "Failed to load profile. Please try logging out and back in, or contact support."
                }
            } catch (error) {
                 console.error("Init failed - likely not logged in:", error);
                 window.location.href = '/login';
            }
        }

        // --- Event Listeners (Keep as they are, but they now use the correctly initialized functions) ---
        if(publishButton) publishButton.addEventListener('click', publishChanges);
        if(openAddLinkModalButton) openAddLinkModalButton.addEventListener('click', () => openModal('add-link-modal'));
        if(openPreviewModalButton && pagePreviewIframe instanceof HTMLIFrameElement) {
            openPreviewModalButton.addEventListener('click', () => {
                if (userProfileDoc && userProfileDoc.username) {
                    const previewUrl = `/${userProfileDoc.username}`;
                    if (pagePreviewIframe.src.endsWith(previewUrl) && pagePreviewIframe.contentWindow) {
                        pagePreviewIframe.contentWindow.location.reload();
                    } else { pagePreviewIframe.src = previewUrl; }
                } else { showMessage(profileMessageArea, "Profile not loaded. Cannot show preview.", "error"); }
                openModal('preview-modal');
            });
        }
        if(refreshPreviewIframeButton && pagePreviewIframe instanceof HTMLIFrameElement) {
            refreshPreviewIframeButton.addEventListener('click', () => {
                 if (pagePreviewIframe.contentWindow) { pagePreviewIframe.contentWindow.location.reload(); }
                 else if (userProfileDoc && userProfileDoc.username) { pagePreviewIframe.src = `/${userProfileDoc.username}`; }
            });
        }
        closeButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const target = e.currentTarget;
                if (target instanceof HTMLElement) {
                    const modalId = target.getAttribute('data-modal-id');
                    if (modalId) closeModal(modalId);
                }
            });
        });
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', (event) => {
                if (event.target === overlay && overlay instanceof HTMLElement) {
                    const modalId = overlay.id;
                    if(modalId) closeModal(modalId);
                }
            });
        });
        if(addLinkModalForm && modalLinkTitleInput instanceof HTMLInputElement && modalLinkUrlInput instanceof HTMLInputElement) {
            addLinkModalForm.addEventListener('submit', (e) => {
                e.preventDefault();
                if(modalLinkTitleInput.value && modalLinkUrlInput.value) {
                    addLinkFromModal(modalLinkTitleInput.value, modalLinkUrlInput.value);
                } else { showMessage(modalLinkMessageArea, 'Please enter both Title and URL.'); }
            });
        }
        if(changePicButton && profilePicUploadInput) {
            changePicButton.addEventListener('click', () => {
                if (profilePicUploadInput instanceof HTMLInputElement) profilePicUploadInput.click();
            });
        }
        if(profilePicUploadInput) profilePicUploadInput.addEventListener('change', (e) => {
            const target = e.target;
            if (target instanceof HTMLInputElement && target.files && target.files.length > 0) {
                uploadPicture(target.files[0]);
            }
        });
        if(linksList) linksList.addEventListener('click', (e) => {
            const target = e.target;
            if (target instanceof HTMLElement && target.classList.contains('delete-link-button')) {
                const linkId = target.dataset.linkId;
                if (linkId && confirm('Are you sure you want to delete this link?')) {
                    if (target instanceof HTMLButtonElement) { target.textContent = '...'; target.disabled = true; }
                    deleteLink(linkId);
                }
            }
        });
        if(logoutButton) logoutButton.addEventListener('click', async () => {
            try {
                // Use 'account'
                await account.deleteSession('current');
                window.location.href = '/login';
            } catch (err) { console.error("Logout failed:", err); }
        });

        // --- Start Everything ---
        initDashboard();
    </script>
</Layout>